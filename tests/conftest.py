# tests/conftest.py generated by GPT-5
import pandas as pd
import numpy as np
import pytest

# --- Fake price generator -----------------------------------------------------
def _make_price_df(dates, base=100.0, drift=0.001):
    """Create a simple OHLCV dataframe with a 'Close' that drifts upward."""
    close = base * (1 + drift) ** (pd.RangeIndex(len(dates)))
    df = pd.DataFrame(
        {
            "Open": close * 0.999,
            "High": close * 1.001,
            "Low": close * 0.998,
            "Close": close,
            "Adj Close": close,  # yfinance sometimes uses this; we set both
            "Volume": 1_000_000,
        },
        index=pd.DatetimeIndex(dates),
    )
    return df

@pytest.fixture(autouse=True)
def stub_yfinance(monkeypatch):
    """
    Replace yfinance.download with a deterministic stub.
    - For ticker 'BAD' return empty (simulates unknown symbol).
    - For others, return a business-day series with gaps (to test ffill).
    """
    import types

    def fake_download(ticker, start=None, end=None, auto_adjust=True, progress=False):
        # Normalize dates
        start = pd.to_datetime(start).tz_localize(None)
        end = pd.to_datetime(end).tz_localize(None)
        if ticker in ("BAD", None, ""):
            # empty frame to simulate 'no data'
            return pd.DataFrame()
        # Business days only to force some ffill when aligned to non-trading days
        dates = pd.bdate_range(start, end, inclusive="left")
        if len(dates) == 0:
            return pd.DataFrame()
        # Different drift per ticker so multi-ticker behavior is testable
        drift = 0.001 if isinstance(ticker, str) else 0.0005
        return _make_price_df(dates, base=100.0, drift=drift)

    # Monkeypatch
    import yfinance as yf
    monkeypatch.setattr(yf, "download", fake_download)
    yield  # tests run with the stub active

# --- Sample trades ------------------------------------------------------------
@pytest.fixture
def trades_one_ticker():
    return pd.DataFrame(
        {
            "date": ["2024-03-01"],  # single trade (edge case)
            "ticker": ["AAPL"],
            "side": ["BUY"],
            "qty": [5],
            "price": [180.0],
            "fees": [0.0],
            "currency": ["USD"],
        }
    )

@pytest.fixture
def trades_multi_day_one_ticker():
    return pd.DataFrame(
        {
            "date": ["2024-03-01", "2024-03-05", "2024-03-05", "2024-03-12"],
            "ticker": ["AAPL", "AAPL", "AAPL", "AAPL"],
            "side": ["BUY", "BUY", "SELL", "BUY"],
            "qty": [5, 3, 2, 1],  # cumulative: 5 -> 8 -> 6 -> 7
            "price": [180.0, 182.0, 183.0, 185.0],
            "fees": [0.0, 0.0, 0.0, 0.0],
            "currency": ["USD"] * 4,
        }
    )

@pytest.fixture
def trades_two_tickers():
    return pd.DataFrame(
        {
            "date": ["2024-03-01", "2024-03-06", "2024-03-10"],
            "ticker": ["AAPL", "MSFT", "AAPL"],
            "side": ["BUY", "BUY", "BUY"],
            "qty": [5, 2, 1],   # AAPL total 6, MSFT total 2
            "price": [180.0, 310.0, 185.0],
            "fees": [0.0, 0.0, 0.0],
            "currency": ["USD", "USD", "USD"],
        }
    )
